---
title: "Lab 5 - R"
format:
  pdf:
    toc: true
    number-sections: true
    colorlinks: true
---


```{r}
librarian::shelf(
    tidyverse
)
```

# Data Analysis

## Table Presentation

```{r}
data = read_csv("https://raw.githubusercontent.com/alexanderquispe/CausalAI-Course/main/data/processed_esti.csv")
data |> head(3)
data |> colnames()
```

```{r}


data1 = 
    data |> dplyr::select(y, w, contains("gender"), age, imd_decile) |>
    tidyr::pivot_longer(contains("gender"), names_to = "gender") |>
    filter(value > 0) |>
    separate(gender, c("v", "gender")) |>
    mutate(gender = factor(gender, labels = c("male", "female", "transgender"))) |>
    dplyr::select(!c(v, value)) 
data1 |> 
    group_by(w, gender) |> 
    summarise(
        n = n(),
        mean_y = mean(y),
        sd_y = sd(y),
        mean_age = mean(age),
        sd_age = sd(age)
    ) |> 
    mutate(
        w = ifelse(w == 0, "Control", "Treatment"),
        gender = ifelse(gender == "male", "Male",  ifelse(gender == "female", "Female", "Transgender")) 
    ) |>
    rename(
        Group = 1,
        Gender = 2,
        "Mean - Y" = 4,
        "sd - Y" = 5,
        "Mean - Age" = 6,
        "sd - Age" = 7
    ) |> knitr::kable(caption = "Descriptive Statisctics by Group and Gender")
```



## Graphs - Final output 

```{r}
theme_set(theme_minimal())
data1 |> 
    ggplot() +
    aes(factor(w, labels = c("Control", "Treatment")), fill = factor(gender, labels = c("Male", 'Female', 'Transgender'))) +
    geom_bar( position = "dodge") +
    labs(
        x = "",
        y = "n",
        title = "Gender Distribution",
        fill = "Gender"
    ) +
    theme(
        legend.position = "top"
    )
```


```{r}
data1 |>
    ggplot() +
    aes(age, 
    fill = factor(w, labels = c("Control", "Treatment"))
    ) +
    geom_density(alpha = .5) +
    scale_fill_manual(values = c("#0798a8", "#a8073a")) +
    labs(
        x = "Age", y = "Density",
        title = "Density",
        fill = ""
    ) +
    theme(
        legend.position = "bottom"
    )
```


# Linear Regression Analysis

## LM 1

```{r}
lm1 =lm(y ~ w, data = data) |> 
    broom::tidy()
```

## LM 2

```{r}
base_formula = y ~ w + age + imd_decile 
lm2 = lm(base_formula, data = data1) |>
    broom::tidy()
```

## Double Lasso

```{r}

cnt <- c(
    "w",
    "gender_female", 
    "gender_male", 
    "age", 
    "imd_decile"
    )

formula <- as.formula(
    paste(
        "y ~ ",  paste(cnt, collapse = " + ")
        )
)


X <- model.matrix(formula, data = data)[,-1]
Y <- data$y


coefs_glm = 
    glmnet::cv.glmnet(X, Y, alpha = .1) |> 
    coef(s = "lambda.min") |> 
    as.matrix() |> 
    as_tibble(rownames='var') |> 
    filter(s1 != 0) |> 
    filter(!stringr::str_detect(var, "ntercept")) |>
    pull(var)

lm3 = lm(
    as.formula(
        paste(
            "y ~ ",
            paste(coefs_glm, collapse = "+")
        )
    ),
    data = data
) |> broom::tidy()

```

## Results

```{r}
table = bind_rows(
    lm1 |> mutate(model = "Simple"),
    lm2 |> mutate(model = "Multiple"),
    lm3 |> mutate(model = "Lasso")
    ) |> 
    filter(term == "w")
table |> knitr::kable()
table |>
    ggplot() +
    aes(
        model, estimate, 
        ymin = estimate - 1.96*std.error,
        ymax = estimate + 1.96*std.error
    ) +
    geom_point() +
    geom_pointrange() +
    ylim(c(0.2, 0.32)) +
    labs(
        x = "",
        y = "Coefficients",
        title = "Value of treatment"
    ) 
```


# Non Linear Methods


```{r}
splits = rsample::initial_split(data, strata = y)

data_test = rsample::testing(splits)
data_train = rsample::training(splits)

y_train = data_train |> select(y)
T_train = data_train |> select(w)
x_train = data_train |> select(!c(y, w))

y_test = data_test |> select(y)
T_test = data_test |> select(w)
x_test = data_test |> select(!c(y, w))
```


```{r}
lm_yd = function(y, d, md){
    df =tibble(y = unlist(y) , d = unlist(d) ) 
    # print(head(df))
    lm(y ~ d, data = df) |> 
        broom::tidy() |> 
        mutate(
            cols = c("I", "d"),
            model = md
        )
}
```


## Lasso

```{r}
lasso_y <- glmnet::cv.glmnet(as.matrix(x_train), y_train |> as.matrix(), alpha = 1, nfolds = 5)
lasso_t <- glmnet::cv.glmnet(as.matrix(x_train), T_train |> as.matrix(), alpha = 1, nfolds = 5)

y_train_hat <- predict(lasso_y, newx = as.matrix(x_test))
T_train_hat <- predict(lasso_t, newx = as.matrix(x_test))

y_r1 <- y_train - y_train_hat
T_r1 <- T_train - T_train_hat

l1 = lm_yd(y_r1, T_r1, "Lasso")

```

## Regression Trees

```{r}
tree_y <- rpart::rpart(y ~ . - w, data = data_train, method = "anova")
tree_t <- rpart::rpart(w ~ . - y, data = data_train, method = "anova")

Y_predicted <- predict(tree_y, newdata = data_test)
T_predicted <- predict(tree_t, newdata = data_test)
y_r2 <- y_test - Y_predicted
T_r2 <- T_test - T_predicted

l2 = lm_yd(y_r2, T_r2, "Reg. Trees")
```


## Boosting Trees

```{r}
boost_y <- gbm::gbm(y ~ . - w, data = data_train, distribution='bernoulli')
boost_t <- gbm::gbm(w ~ . - y, data = data_train, distribution='bernoulli')


Y_predicted <- predict(boost_y, newdata = data_test, n.trees = 100)  
T_predicted <- predict(boost_t, newdata = data_test, n.trees = 100)  
y_r3 <- y_test - Y_predicted
T_r3 <- T_test - T_predicted

l3 = lm_yd(y_r3, T_r3, "Bost. Trees")
```

## Regresssion Forest


```{r}
model_y <- randomForest::randomForest(y ~ . - w, data = data_train)
model_t <- randomForest::randomForest(w ~ . - y, data = data_train)

Y_predicted <- predict(model_y, newdata = data_test)
T_predicted <- predict(model_t, newdata = data_test)
y_r4 <- y_test - Y_predicted
T_r4 <- T_test - T_predicted

l4 = lm_yd(y_r4, T_r4, "Reg. Forest")
```

## Results

```{r}
results = bind_rows(
    l1, l2, l3, l4
) |> 
    filter(term == "d") |> 
    select(!cols) |> 
    arrange(estimate)
    
results |>
    knitr::kable(caption="Regression values")
```

### Plot

```{r}
results |> 
    ggplot() +
    aes(
        model, estimate, 
        ymin = estimate - 1.96*std.error,
        ymax = estimate + 1.96*std.error
    ) +
    geom_point() +
    geom_pointrange() +
    labs(
        x = "",
        y = "Coefficients",
        title = "Value of treatment"
    ) +
    coord_flip()
```
